!function(){"use strict";class e{constructor(e,t,s,r,i,n){this._id=e._id,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._userId=i,this._cardOwnerId=e.owner._id,this._handleLikeClick=n,this._likeArr=e.likes}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeBtn=this._card.querySelector("#card_like-button"),this._deleteBtn=this._card.querySelector(".card__delete-btn"),this._image=this._card.querySelector(".card__image"),this._likeBtn.addEventListener("click",(()=>{this._toggleLikeBtn(),this._handleLikeClick(this._id)})),this._deleteBtn.addEventListener("click",(()=>this._handleDeleteClick(this._id))),this._image.addEventListener("click",(()=>this._openImage()))}_openImage(){this._handleImageClick(this._link,this._name)}_toggleLikeBtn(){this._likeBtn.classList.toggle("card__like-button_enabled")}isLiked(){return this._likeArr.some((e=>{let{_id:t}=e;return t===this._userId}))}_renderLikesCounter(){this._likeCounter=this._card.querySelector(".card__like_counter"),this._likeCounter.textContent=this._likeArr.length}updateLikesCounter(e){this._likeArr=e,this._renderLikesCounter()}removeCard(){this._card.remove(),this._card=null}getView(){return this._card=this._getTemplate(),this._setEventListeners(),this._image.src=this._link,this._image.alt=this._name,this._card.querySelector(".card__title").textContent=this._name,this._userId!==this._cardOwnerId&&this._deleteBtn.remove(),this.isLiked()&&this._toggleLikeBtn(),this._renderLikesCounter(),this._card}}const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button-disabled",inputErrorClass:".modal__input-type-error",errorClass:"modal__error_visible",cardSectionClass:".cards__list",cardTeplate:".card__teplate"};class s{constructor(e,t){let{data:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._closeByEsc)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._closeByEsc)}_closeByEsc=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close(),e.target.classList.contains("modal__close-button")&&this.close()}))}}class i extends r{constructor(e,s){super({popupSelector:e}),this._popupFormEl=this._popupElement.querySelector(t.formSelector),this._inputEls=this._popupFormEl.querySelectorAll(t.inputSelector),this._handleSubmit=s,this._submitBtn=this._popupFormEl.querySelector(t.submitButtonSelector)}setInputValues(e){this._inputEls.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._popupFormEl.reset()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}toggleSaveBtn(){this._submitBtn.classList.toggle("modal__saving-button"),console.log("its working")}setEventListeners(){super.setEventListeners(),this._popupFormEl.addEventListener("submit",(()=>{this._handleSubmit(this._getInputValues())}))}}class n{constructor(e){let{title:t,subtitle:s}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s)}getUserInfo(){return{name:this._nameEl.textContent,about:this._jobEl.textContent}}setUserInfo(e){this._nameEl.textContent=e.name,this._jobEl.textContent=e.about}}const o=document.querySelector("#profile__add-button"),l=document.querySelector("#profile__edit-btn"),a=document.querySelector("#profile__avatar-btn"),h=document.querySelector(".profile__picture");let c,_,d;function u(t){const s=function(t){return new e(t,"#card__template",m,p,d,E).getView()}(t);c.addItem(s)}function m(e,t){f.open(e,t)}function p(e){S.open(),S.setSubmitAction((()=>{b.deleteCard(e).then((()=>{this.removeCard(),S.close()}))}))}function E(e){this.isLiked()?b.removeLike(e).then((e=>{this.updateLikesCounter(e.likes)})):b.addLike(e).then((e=>{this.updateLikesCounter(e.likes)}))}const b=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getAppInfo(){return Promise.all([this.getInitialCards,this.getUserInfo]).then((e=>{console.log(e)}))}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cd8b3986-f3d6-4da9-8f48-96bc48ae4bb7","Content-Type":"application/json"}});b.getAppInfo().then(b.getUserInfo().then((e=>{d=e._id,h.src=e.avatar,_=new n({title:".profile__title",subtitle:".profile__subtitle"}),_.setUserInfo(e)}))).then(b.getInitialCards().then((e=>{c=new s({data:e,renderer:e=>{u(e)}},t.cardSectionClass),c.renderItems()}))).catch((e=>{console.error(e)}));const g=new i("#profile__edit-modal",(e=>{g.toggleSaveBtn(),_.setUserInfo(e),b.updateUserInfo(e).catch((e=>{console.error(e)})).finally((()=>{g.close(),g.toggleSaveBtn()}))})),v=new i("#profile__avatar_modal",(e=>{v.toggleSaveBtn(),b.updateProfilePicture(e).then((e=>{h.src=e.avatar})).catch((e=>{console.error(e)})).finally((()=>{v.close(),v.toggleSaveBtn()}))})),k=new i("#profile__add-modal",(e=>{k.toggleSaveBtn(),b.addNewCard(e).then((e=>u(e))).catch((e=>{console.error(e)})).finally((()=>{k.toggleSaveBtn(),k.close()}))})),S=new class extends r{constructor(e){super({popupSelector:e}),this._submitBtn=this._popupElement.querySelector(".modal__save-button")}setSubmitAction(e){this._handleDelete=e}setEventListeners(){super.setEventListeners(),this._submitBtn.addEventListener("mousedown",(()=>{this._handleDelete()}))}}("#card__delete-modal"),f=new class extends r{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__image"),this._caption=this._popupElement.querySelector(".modal__image-caption")}open(e,t){super.open(),this._image.src=e,this._image.alt=t,this._caption.textContent=t}}("#card__image-modal"),L={};(e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((t=>{const s=new class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._buttonEl=this._formElement.querySelector(this._submitButtonSelector),this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)]}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e),this._toggleSubmitBtn(e)})),this._disableSubmitBtn(),this._formElement.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleSubmitBtn(e)}),0)}))}))}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleSubmitBtn(){this._hasInvalidInput()?this._disableSubmitBtn():this._enableSubmitBtn()}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_disableSubmitBtn(){this._buttonEl.classList.add(this._inactiveButtonClass),this._buttonEl.disabled=!0}_enableSubmitBtn(){this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(e,t),r=t.getAttribute("name");L[r]=s,s.enableValidation()}))})(t),f.setEventListeners(),k.setEventListeners(),g.setEventListeners(),S.setEventListeners(),v.setEventListeners(),o.addEventListener("click",(()=>k.open())),l.addEventListener("click",(()=>{g.open(),g.setInputValues(_.getUserInfo())})),a.addEventListener("click",(()=>{v.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,