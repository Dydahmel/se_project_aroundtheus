!function(){"use strict";class e{constructor(e,t,s,n){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handeImageClick=s,this._handleDeleteClick=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeBtn=this._card.querySelector("#card_like-button"),this._deleteBtn=this._card.querySelector(".card__delete-btn"),this._image=this._card.querySelector(".card__image"),this._likeBtn.addEventListener("click",(()=>this._toggleLikeBtn())),this._deleteBtn.addEventListener("click",(()=>{this._removeCard(),this._handleDeleteClick()})),this._image.addEventListener("click",(()=>this._openImage()))}_openImage(){this._handeImageClick(this._link,this._name)}_toggleLikeBtn(){this._likeBtn.classList.toggle("card__like-button_enabled")}_removeCard(){this._card.remove(),this._card=null}getView(){return this._card=this._getTemplate(),this._setEventListeners(),this._image.src=this._link,this._image.alt=this._name,this._card.querySelector(".card__title").textContent=this._name,this._card}}const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button-disabled",inputErrorClass:".modal__input-type-error",errorClass:"modal__error_visible",cardSectionClass:".cards__list",cardTeplate:".card__teplate"};class s{constructor(e,t){let{data:s,renderer:n}=e;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}}class n{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._closeByEsc)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._closeByEsc)}_closeByEsc=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close(),e.target.classList.contains("modal__close-button")&&this.close()}))}}class r extends n{constructor(e,s){super({popupSelector:e}),this._popupFormEl=this._popupElement.querySelector(t.formSelector),this._inputEls=this._popupFormEl.querySelectorAll(t.inputSelector),this._handleSubmit=s}setInputValues(e){this._inputEls.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._popupFormEl.reset()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupFormEl.addEventListener("submit",(()=>{this._handleSubmit(this._getInputValues())}))}}class i{constructor(e){let{title:t,subtitle:s}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s)}getUserInfo(){return{name:this._nameEl.textContent,about:this._jobEl.textContent}}setUserInfo(e){this._nameEl.textContent=e.name,this._jobEl.textContent=e.about}}const o=document.querySelector("#profile__add-button"),l=document.querySelector("#profile__edit-btn");let a,c;function _(t){const s=function(t){return new e(t,"#card__template",d,h).getView()}(t);a.addItem(s)}function d(e,t){E.open(e,t)}function h(){p.open()}const u=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?(console.log("its working"),e.json()):Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}addNewCard(e){fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cd8b3986-f3d6-4da9-8f48-96bc48ae4bb7","Content-Type":"application/json"}});u.getUserInfo().then((e=>{c=new i({title:".profile__title",subtitle:".profile__subtitle"}),c.setUserInfo(e)})),u.getInitialCards().then((e=>{a=new s({data:e,renderer:e=>{_(e)}},t.cardSectionClass),a.renderItems()}));const m=new r("#profile__edit-modal",(e=>{c.setUserInfo(e),u.updateUserInfo(e),m.close()})),p=new class extends n{constructor(e,t){super({popupSelector:e}),this._submitBtn=this._popupElement.querySelector(".modal__save-button"),this._handleDelete=t}setEventListeners(){super.setEventListeners(),this._submitBtn.addEventListener("mousedown",(()=>{this._handleDelete(),console.log("button is working")}))}}("#card__delete-modal",(()=>{p.close()})),E=new class extends n{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__image"),this._caption=this._popupElement.querySelector(".modal__image-caption")}open(e,t){super.open(),this._image.src=e,this._image.alt=t,this._caption.textContent=t}}("#card__image-modal"),b=new r("#profile__add-modal",(e=>{u.addNewCard(e),_(e),b.close()})),v={};(e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((t=>{const s=new class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._buttonEl=this._formElement.querySelector(this._submitButtonSelector),this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)]}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e),this._toggleSubmitBtn(e)})),this._disableSubmitBtn(),this._formElement.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleSubmitBtn(e)}),0)}))}))}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleSubmitBtn(){this._hasInvalidInput()?this._disableSubmitBtn():this._enableSubmitBtn()}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_disableSubmitBtn(){this._buttonEl.classList.add(this._inactiveButtonClass),this._buttonEl.disabled=!0}_enableSubmitBtn(){this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(e,t),n=t.getAttribute("name");v[n]=s,s.enableValidation()}))})(t),E.setEventListeners(),b.setEventListeners(),m.setEventListeners(),p.setEventListeners(),o.addEventListener("click",(()=>b.open())),l.addEventListener("click",(()=>{m.open(),m.setInputValues(c.getUserInfo())}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,