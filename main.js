!function(){"use strict";class e{constructor(e,t,s,r){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handeImageClick=s,this._handleDeleteClick=r}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeBtn=this._card.querySelector("#card_like-button"),this._deleteBtn=this._card.querySelector(".card__delete-btn"),this._image=this._card.querySelector(".card__image"),this._likeBtn.addEventListener("click",(()=>this._toggleLikeBtn())),this._deleteBtn.addEventListener("click",(()=>{this._removeCard(),this._handleDeleteClick})),this._image.addEventListener("click",(()=>this._openImage()))}_openImage(){this._handeImageClick(this._link,this._name)}_toggleLikeBtn(){this._likeBtn.classList.toggle("card__like-button_enabled")}_removeCard(){this._card.remove(),this._card=null}getView(){return this._card=this._getTemplate(),this._setEventListeners(),this._image.src=this._link,this._image.alt=this._name,this._card.querySelector(".card__title").textContent=this._name,this._card}}const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button-disabled",inputErrorClass:".modal__input-type-error",errorClass:"modal__error_visible",cardSectionClass:".cards__list",cardTeplate:".card__teplate"};class s{constructor(e,t){let{data:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._closeByEsc)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._closeByEsc)}_closeByEsc=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close(),e.target.classList.contains("modal__close-button")&&this.close()}))}}class i extends r{constructor(e,s){super({popupSelector:e}),this._popupFormEl=this._popupElement.querySelector(t.formSelector),this._inputEls=this._popupFormEl.querySelectorAll(t.inputSelector),this._handleSubmit=s}setInputValues(e){this._inputEls.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._popupFormEl.reset()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupFormEl.addEventListener("submit",(()=>{this._handleSubmit(this._getInputValues())}))}}class n{constructor(e){let{title:t,subtitle:s}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s)}getUserInfo(){return{name:this._nameEl.textContent,about:this._jobEl.textContent}}setUserInfo(e){this._nameEl.textContent=e.name,this._jobEl.textContent=e.about}}const o=document.querySelector("#profile__add-button"),l=document.querySelector("#profile__edit-btn");let a,c;function _(t){const s=function(t){return new e(t,"#card__template",d).getView()}(t);a.addItem(s)}function d(e,t){m.open(e,t)}const h=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?(console.log("its working"),e.json()):Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}addNewCard(e){fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cd8b3986-f3d6-4da9-8f48-96bc48ae4bb7","Content-Type":"application/json"}});h.getUserInfo().then((e=>{c=new n({title:".profile__title",subtitle:".profile__subtitle"}),c.setUserInfo(e)})),h.getInitialCards().then((e=>{a=new s({data:e,renderer:e=>{_(e)}},t.cardSectionClass),a.renderItems()}));const u=new i("#profile__edit-modal",(e=>{c.setUserInfo(e),h.updateUserInfo(e),u.close()})),m=(new class extends r{constructor(e){super({popupSelector:e}),this._card=this._popupElement.querySelector(".card")}setEventListeners(){super.setEventListeners()}}("#card__delete-modal"),new class extends r{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__image"),this._caption=this._popupElement.querySelector(".modal__image-caption")}open(e,t){super.open(),this._image.src=e,this._image.alt=t,this._caption.textContent=t}}("#card__image-modal")),p=new i("#profile__add-modal",(e=>{h.addNewCard(e),_(e),p.close()})),E={};(e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((t=>{const s=new class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._buttonEl=this._formElement.querySelector(this._submitButtonSelector),this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)]}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e),this._toggleSubmitBtn(e)})),this._disableSubmitBtn(),this._formElement.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleSubmitBtn(e)}),0)}))}))}_checkValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleSubmitBtn(){this._hasInvalidInput()?this._disableSubmitBtn():this._enableSubmitBtn()}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_disableSubmitBtn(){this._buttonEl.classList.add(this._inactiveButtonClass),this._buttonEl.disabled=!0}_enableSubmitBtn(){this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(e,t),r=t.getAttribute("name");E[r]=s,s.enableValidation()}))})(t),m.setEventListeners(),p.setEventListeners(),u.setEventListeners(),o.addEventListener("click",(()=>p.open())),l.addEventListener("click",(()=>{u.open(),u.setInputValues(c.getUserInfo())}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUtrSSxZQUNyQyxDQUVBSyxtQkFDTXZJLEtBQUtpSixtQkFDUGpKLEtBQUt3SSxvQkFFTHhJLEtBQUtrSixrQkFFVCxDQUVBRCxtQkFDRSxPQUFRakosS0FBS29FLFVBQVUrRSxPQUFPZCxHQUFZQSxFQUFRSyxTQUFTQyxPQUM3RCxDQUVBSCxvQkFDRXhJLEtBQUtvSSxVQUFVOUcsVUFBVWlDLElBQUl2RCxLQUFLZ0ksc0JBQ2xDaEksS0FBS29JLFVBQVVnQixVQUFXLENBQzVCLENBRUFGLG1CQUNFbEosS0FBS29JLFVBQVU5RyxVQUFVRSxPQUFPeEIsS0FBS2dJLHNCQUNyQ2hJLEtBQUtvSSxVQUFVZ0IsVUFBVyxDQUM1QixDQUVBQyxtQkFDRXJKLEtBQUttSSxhQUFhakgsaUJBQWlCLFVBQVd5QyxJQUM1Q0EsRUFBSTJGLGdCQUFnQixJQUV0QnRKLEtBQUthLG9CQUNQLEdKcUJzQ2dCLEVBQVErRixHQUV0QzJCLEVBQVczQixFQUFZNEIsYUFBYSxRQUcxQy9CLEVBQWU4QixHQUFZMUIsRUFDM0JBLEVBQVV3QixrQkFBa0IsR0FDNUIsRUFHSkEsQ0FBaUJ4SCxHQUVqQitELEVBQVcvQixvQkFDWDJELEVBQWEzRCxvQkFDYnlELEVBQWN6RCxvQkFFZHdCLEVBQWNuRSxpQkFBaUIsU0FBUyxJQUFNc0csRUFBYWxFLFNBQzNEZ0MsRUFBZXBFLGlCQUFpQixTQUFTLEtBQ3ZDb0csRUFBY2hFLE9BQ2RnRSxFQUFjL0MsZUFBZWlCLEVBQVNOLGNBQWMsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwRGVsZXRlLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVJbWFnZUNsaWNrLCBoYW5kbGVEZWxldGVDbGljaykge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IGNhcmRFbCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICByZXR1cm4gY2FyZEVsO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbGlrZUJ0biA9IHRoaXMuX2NhcmQucXVlcnlTZWxlY3RvcihcIiNjYXJkX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fZGVsZXRlQnRuID0gdGhpcy5fY2FyZC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idG5cIik7XHJcbiAgICB0aGlzLl9pbWFnZSA9IHRoaXMuX2NhcmQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2xpa2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuX3RvZ2dsZUxpa2VCdG4oKSk7XHJcbiAgICB0aGlzLl9kZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHt0aGlzLl9yZW1vdmVDYXJkKCk7IHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrfSk7XHJcbiAgICB0aGlzLl9pbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5fb3BlbkltYWdlKCkpO1xyXG4gIH1cclxuXHJcbiAgX29wZW5JbWFnZSgpIHtcclxuICAgIHRoaXMuX2hhbmRlSW1hZ2VDbGljayh0aGlzLl9saW5rLCB0aGlzLl9uYW1lKTtcclxuICB9XHJcblxyXG4gIF90b2dnbGVMaWtlQnRuKCkge1xyXG4gICAgdGhpcy5fbGlrZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fZW5hYmxlZFwiKTtcclxuICB9XHJcblxyXG4gIF9yZW1vdmVDYXJkKCkge1xyXG4gICAgdGhpcy5fY2FyZC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2NhcmQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmlldygpIHtcclxuICAgIHRoaXMuX2NhcmQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX2ltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9pbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fY2FyZC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZDtcclxuICB9XHJcbn1cclxuIiwiLy9zZWxlY3RvcnMgZm9yIHZhbGlkYXRpb25cclxuXHJcbmNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19zYXZlLWJ1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX3NhdmUtYnV0dG9uLWRpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIi5tb2RhbF9faW5wdXQtdHlwZS1lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxuICBjYXJkU2VjdGlvbkNsYXNzOiBcIi5jYXJkc19fbGlzdFwiLFxyXG4gIGNhcmRUZXBsYXRlOiBcIi5jYXJkX190ZXBsYXRlXCIsXHJcbn07XHJcblxyXG5jb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUveW9zZW1pdGUuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9sYXRlbWFyLmpwZ1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvdmFub2lzZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGFnby5qcGdcIixcclxuICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IHsgY29uZmlnLCBpbml0aWFsQ2FyZHMgfTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBkYXRhLCByZW5kZXJlciB9LCBjYXJkTGlzdCkge1xyXG4gICAgdGhpcy5fcmVuZGVyZWRJdGVtcyA9IGRhdGE7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjYXJkTGlzdCk7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlZEl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gIH1cclxuICBvcGVuKCkge1xyXG4gICAgLy9vcGVuIHBvcHVwXHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2Nsb3NlQnlFc2MpO1xyXG4gIH1cclxuICBjbG9zZSgpIHtcclxuICAgIC8vY2xvc2UgcG9wdXBcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5fY2xvc2VCeUVzYyk7XHJcbiAgfVxyXG4gIF9jbG9zZUJ5RXNjID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbFwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2UtYnV0dG9uXCIpKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwXCI7XHJcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0KSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7ICAgIFxyXG4gICAgdGhpcy5fcG9wdXBGb3JtRWwgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuZm9ybVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gdGhpcy5fcG9wdXBGb3JtRWwucXVlcnlTZWxlY3RvckFsbChjb25maWcuaW5wdXRTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBoYW5kbGVTdWJtaXQ7ICAgIFxyXG4gIH1cclxuICBzZXRJbnB1dFZhbHVlcyhkYXRhKSB7XHJcbiAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAvLyBoZXJlIHlvdSBpbnNlcnQgdGhlIGB2YWx1ZWAgYnkgdGhlIGBuYW1lYCBvZiB0aGUgaW5wdXRcclxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1FbC5yZXNldCgpO1xyXG4gIH0gIFxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9O1xyXG4gICAgLy9nZXQgYWxsIGlucHV0cyAgICBcclxuICAgIC8vbG9vcCBvdmVyIGFsbCBpbnB1dHNcclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIC8vYXNzaWduIGlucHV0cyB0byBlbXB0eSBvYmplY3QgYnkgbmFtZT12YWx1ZVxyXG4gICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm1FbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IHRpdGxlLCBzdWJ0aXRsZSB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRpdGxlKTtcclxuICAgIHRoaXMuX2pvYkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzdWJ0aXRsZSk7XHJcbiAgfVxyXG4gIFxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsLnRleHRDb250ZW50LFxyXG4gICAgICBhYm91dDogdGhpcy5fam9iRWwudGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuICBzZXRVc2VySW5mbyh2YWx1ZSkge1xyXG4gICAgXHJcbiAgICAvL3NldCB1c2VyIGluZm8gZnJvbSB2YWx1ZVxyXG4gICAgdGhpcy5fbmFtZUVsLnRleHRDb250ZW50ID0gdmFsdWUubmFtZTtcclxuICAgIHRoaXMuX2pvYkVsLnRleHRDb250ZW50ID0gdmFsdWUuYWJvdXQ7XHJcbiAgfVxyXG59XHJcbiIsIi8vYnV0IHdoeSB3ZSBjYW5ub3QganVzdCB1c2UgVEFCIGluZGVudGF0aW9uIG9uIGNvZGUgZm9ybWF0dGluZz8gd2h5IGl0IHNob3VsZCBiZSBkb3VibGUgc3BhY2U/XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCBQb3BwdXJEZWxldGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBEZWxldGUuanNcIjtcclxuaW1wb3J0IFwiLi4vcGFnZS9pbmRleC5jc3NcIjtcclxuXHJcbmNvbnN0IHByb2ZpbGVBZGRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVfX2FkZC1idXR0b25cIik7XHJcbmNvbnN0IHByb2ZpbGVFZGl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlX19lZGl0LWJ0blwiKTtcclxuLy9wbGFjZWhvbGRlciBmb3Igc2VjdGlvblxyXG5sZXQgY2FyZFNlY3Rpb247XHJcbi8vcGxhY2Vob2xkZXIgZm9yIHVzZXJJbmZvXHJcbmxldCB1c2VySW5mbztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoaXRlbSkge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gbmV3IENhcmQoXHJcbiAgICBpdGVtLFxyXG4gICAgXCIjY2FyZF9fdGVtcGxhdGVcIixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2tcclxuICApLmdldFZpZXcoKTtcclxuICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckNhcmQoaXRlbSkge1xyXG4gIGNvbnN0IGNhcmQgPSBjcmVhdGVDYXJkKGl0ZW0pO1xyXG4gIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2sobmFtZSwgbGluaykge1xyXG4gIHBvcHVwSW1hZ2Uub3BlbihuYW1lLCBsaW5rKTtcclxufVxyXG5cclxuXHJcblxyXG4vL25ldyBpbnN0IG9mIEFQSShzZXQgb3B0aW9ucylcclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCJjZDhiMzk4Ni1mM2Q2LTRkYTktOGY0OC05NmJjNDhhZTRiYjdcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuYXBpLmdldFVzZXJJbmZvKCkudGhlbigocmVzKSA9PiB7XHJcbiAgLy9uZXcgVXNlckluZm8gXHJcbiAgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xyXG4gICAgdGl0bGU6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXHJcbiAgICBzdWJ0aXRsZTogXCIucHJvZmlsZV9fc3VidGl0bGVcIixcclxuICB9KTtcclxuICAvL3NldHRpbmcgdXNlckluZm8gZnJvbSBzZXJ2ZXJcclxuICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXMpXHJcbn0pXHJcblxyXG4vLyBsb2FkZWQgY2FyZHMgZnJvbSBzZXJ2ZXJcclxuYXBpLmdldEluaXRpYWxDYXJkcygpLnRoZW4oKHJlcykgPT4ge1xyXG4gIC8vbmV3IHNlY3Rpb25cclxuICBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxyXG4gICAge1xyXG4gICAgICAvL3VzaW5nIGRhdGEgZnJvbSBzZXJ2ZXJcclxuICAgICAgZGF0YTogcmVzLFxyXG4gICAgICByZW5kZXJlcjogKGl0ZW0pID0+IHtcclxuICAgICAgICByZW5kZXJDYXJkKGl0ZW0pO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNvbmZpZy5jYXJkU2VjdGlvbkNsYXNzXHJcbiAgKTtcclxuICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG59KTtcclxuXHJcblxyXG5jb25zdCBwb3B1cEVkaXRGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjcHJvZmlsZV9fZWRpdC1tb2RhbFwiLFxyXG4gIChpbnB1dFZhbHVlcykgPT4ge1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oaW5wdXRWYWx1ZXMpO1xyXG4gICAgLy91cGRhdGluZyB1c2VySW5mbyAob24/YXQ/aW4pIHNlcnZlclxyXG4gICAgYXBpLnVwZGF0ZVVzZXJJbmZvKGlucHV0VmFsdWVzKVxyXG4gICAgcG9wdXBFZGl0Rm9ybS5jbG9zZSgpO1xyXG4gIH1cclxuKTtcclxuXHJcblxyXG5cclxuY29uc3QgcG9wdXBEZWxldGUgPSBuZXcgUG9wcHVyRGVsZXRlKFwiI2NhcmRfX2RlbGV0ZS1tb2RhbFwiKTtcclxuXHJcbmNvbnN0IHBvcHVwSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjY2FyZF9faW1hZ2UtbW9kYWxcIik7XHJcblxyXG5jb25zdCBwb3B1cEFkZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNwcm9maWxlX19hZGQtbW9kYWxcIiwgKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgYXBpLmFkZE5ld0NhcmQoaW5wdXRWYWx1ZXMpXHJcbiAgcmVuZGVyQ2FyZChpbnB1dFZhbHVlcyk7XHJcbiAgcG9wdXBBZGRGb3JtLmNsb3NlKCk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBmb3JtVmFsaWRhdG9ycyA9IHt9O1xyXG5cclxuLy8gZW5hYmxlIHZhbGlkYXRpb25cclxuY29uc3QgZW5hYmxlVmFsaWRhdGlvbiA9IChjb25maWcpID0+IHtcclxuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb25maWcuZm9ybVNlbGVjdG9yKSk7XHJcbiAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybUVsZW1lbnQpO1xyXG4gICAgLy8gaGVyZSB5b3UgZ2V0IHRoZSBuYW1lIG9mIHRoZSBmb3JtXHJcbiAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XHJcblxyXG4gICAgLy8gaGVyZSB5b3Ugc3RvcmUgYSB2YWxpZGF0b3IgYnkgdGhlIGBuYW1lYCBvZiB0aGUgZm9ybVxyXG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gdmFsaWRhdG9yO1xyXG4gICAgdmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9KTtcclxufTtcclxuXHJcbmVuYWJsZVZhbGlkYXRpb24oY29uZmlnKTtcclxuXHJcbnBvcHVwSW1hZ2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxucG9wdXBBZGRGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbnBvcHVwRWRpdEZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbnByb2ZpbGVBZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHBvcHVwQWRkRm9ybS5vcGVuKCkpO1xyXG5wcm9maWxlRWRpdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHBvcHVwRWRpdEZvcm0ub3BlbigpO1xyXG4gIHBvcHVwRWRpdEZvcm0uc2V0SW5wdXRWYWx1ZXModXNlckluZm8uZ2V0VXNlckluZm8oKSk7XHJcbn0pO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XHJcbiAgICAgICAgdGhpcy5fYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcclxuICAgICAgICB0aGlzLl9oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBfY2hlY2tSZXNwb25zZShyZXMpIHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIml0cyB3b3JraW5nXCIpXHJcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgZ2V0SW5pdGlhbENhcmRzKCl7XHJcbiAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2Ase1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSkgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckluZm8oKXtcclxuICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCx7XHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICB1cGRhdGVVc2VySW5mbyhpbnB1dCl7XHJcbiAgICAgIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgbmFtZTogaW5wdXQubmFtZSAsXHJcbiAgICAgICAgICBhYm91dDogaW5wdXQuYWJvdXRcclxuICAgICAgICB9KVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGROZXdDYXJkKGlucHV0KXtcclxuICAgICAgZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgIG5hbWU6IGlucHV0Lm5hbWUsXHJcbiAgICAgICAgICBsaW5rOiBpbnB1dC5saW5rXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXBcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wcHVyRGVsZXRlIGV4dGVuZHMgUG9wdXB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKXtcclxuICAgICAgICBzdXBlcih7cG9wdXBTZWxlY3Rvcn0pXHJcbiAgICAgICAgdGhpcy5fY2FyZCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgIH1cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpe1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKClcclxuICAgIH1cclxuXHJcbiAgICBcclxufTsiLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXBcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5fY2FwdGlvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZS1jYXB0aW9uXCIpO1xyXG4gIH1cclxuICBvcGVuKG5hbWUsIGxpbmspIHtcclxuICAgIHN1cGVyLm9wZW4oKTsgICAgXHJcbiAgICB0aGlzLl9pbWFnZS5zcmMgPSBuYW1lO1xyXG4gICAgdGhpcy5faW1hZ2UuYWx0ID0gbGluaztcclxuICAgIHRoaXMuX2NhcHRpb24udGV4dENvbnRlbnQgPSBsaW5rO1xyXG4gIH1cclxufVxyXG4iLCJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGNvbmZpZy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlnLmVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5fYnV0dG9uRWwgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gW1xyXG4gICAgICAuLi50aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpLFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrVmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlU3VibWl0QnRuKGlucHV0RWwpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5fZGlzYWJsZVN1Ym1pdEJ0bigpO1xyXG4gICAgICAvL3Jlc2V0IFwiZXZlbnRcIlxyXG4gICAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIC8vIGBzZXRUaW1lb3V0YCBpcyBuZWVkZWQgdG8gd2FpdCB0aWxsIHRoZSBmb3JtIGlzIGZ1bGx5IHJlc2V0IGFuZCB0aGVuIHRvIGNhbGwgYHRvZ2dsZUJ1dHRvblN0YXRlYFxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fdG9nZ2xlU3VibWl0QnRuKGlucHV0RWwpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrVmFsaWRpdHkoaW5wdXRFbCkge1xyXG4gICAgLy90YWtpbmcgaW5wdXRFbCBmcm9tIGV2ZW50IGxpc2VuZXJzXHJcbiAgICBpZiAoIWlucHV0RWwudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSBpbnB1dEVsLnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JNZXNzYWdlLmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWwuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIGVycm9yTWVzc2FnZS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX3RvZ2dsZVN1Ym1pdEJ0bigpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICB0aGlzLl9kaXNhYmxlU3VibWl0QnRuKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9lbmFibGVTdWJtaXRCdG4oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuX2lucHV0RWxzLmV2ZXJ5KChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gIF9kaXNhYmxlU3VibWl0QnRuKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uRWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIF9lbmFibGVTdWJtaXRCdG4oKSB7XHJcbiAgICB0aGlzLl9idXR0b25FbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fYnV0dG9uRWwuZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdG9yO1xyXG4iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVDbGljayIsIl9nZXRUZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbGlrZUJ0biIsIl9jYXJkIiwiX2RlbGV0ZUJ0biIsIl9pbWFnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfdG9nZ2xlTGlrZUJ0biIsIl9yZW1vdmVDYXJkIiwiX29wZW5JbWFnZSIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInJlbW92ZSIsImdldFZpZXciLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsImNvbmZpZyIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiY2FyZFNlY3Rpb25DbGFzcyIsImNhcmRUZXBsYXRlIiwiU2VjdGlvbiIsIl9yZWYiLCJjYXJkTGlzdCIsInJlbmRlcmVyIiwiX3JlbmRlcmVkSXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwicmVuZGVySXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJvcGVuIiwiYWRkIiwiX2Nsb3NlQnlFc2MiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybUVsIiwiX2lucHV0RWxzIiwicXVlcnlTZWxlY3RvckFsbCIsIl9oYW5kbGVTdWJtaXQiLCJzZXRJbnB1dFZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJyZXNldCIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0VmFsdWVzIiwiVXNlckluZm8iLCJ0aXRsZSIsInN1YnRpdGxlIiwiX25hbWVFbCIsIl9qb2JFbCIsImdldFVzZXJJbmZvIiwiYWJvdXQiLCJzZXRVc2VySW5mbyIsInByb2ZpbGVBZGRCdG4iLCJwcm9maWxlRWRpdEJ0biIsImNhcmRTZWN0aW9uIiwidXNlckluZm8iLCJyZW5kZXJDYXJkIiwiY2FyZCIsImNyZWF0ZUNhcmQiLCJwb3B1cEltYWdlIiwiYXBpIiwib3B0aW9ucyIsIl9iYXNlVXJsIiwiYmFzZVVybCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsIl9jaGVja1Jlc3BvbnNlIiwicmVzIiwib2siLCJjb25zb2xlIiwibG9nIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsInRoZW4iLCJ1cGRhdGVVc2VySW5mbyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkTmV3Q2FyZCIsImF1dGhvcml6YXRpb24iLCJwb3B1cEVkaXRGb3JtIiwiX2NhcHRpb24iLCJwb3B1cEFkZEZvcm0iLCJmb3JtVmFsaWRhdG9ycyIsIkFycmF5IiwiZnJvbSIsImZvcm1FbGVtZW50IiwidmFsaWRhdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsIl9mb3JtRWxlbWVudCIsIl9idXR0b25FbCIsImlucHV0RWwiLCJfY2hlY2tWYWxpZGl0eSIsIl90b2dnbGVTdWJtaXRCdG4iLCJfZGlzYWJsZVN1Ym1pdEJ0biIsInNldFRpbWVvdXQiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwiZXJyb3JNZXNzYWdlIiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oYXNJbnZhbGlkSW5wdXQiLCJfZW5hYmxlU3VibWl0QnRuIiwiZXZlcnkiLCJkaXNhYmxlZCIsImVuYWJsZVZhbGlkYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImZvcm1OYW1lIiwiZ2V0QXR0cmlidXRlIl0sInNvdXJjZVJvb3QiOiIifQ==